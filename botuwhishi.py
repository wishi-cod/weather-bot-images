import os
import random
import requests
import telebot
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = "8327112856:AAGraTlfR5_BCUbmJdHWiB_p21qGznxUebE"
WEATHERAPI_KEY = "bcf02dcbcbae43efb4b201514251410"

# –ü—É—Ç–∏
GITHUB_BASE_URL = "https://raw.githubusercontent.com/kostyap1488-hue/weather-bot-images/main/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, threaded=False)
user_data = {}

class WeatherIcons:
    """–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∫–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã"""
    
    WEATHER_MAPPING = {
        'sunny': '‚òÄÔ∏è', 'clear': '‚òÄÔ∏è',
        'partly cloudy': '‚õÖ', 'cloudy': '‚òÅÔ∏è', 'overcast': '‚òÅÔ∏è',
        'patchy rain possible': 'üå¶Ô∏è', 'light rain': 'üå¶Ô∏è', 'moderate rain': 'üåßÔ∏è',
        'heavy rain': 'üåßÔ∏è', 'light snow': '‚ùÑÔ∏è', 'heavy snow': '‚ùÑÔ∏è',
        'thundery outbreaks possible': '‚õàÔ∏è', 'mist': 'üå´Ô∏è', 'fog': 'üå´Ô∏è',
        'patchy light rain': 'üå¶Ô∏è', 'moderate rain at times': 'üåßÔ∏è',
        'heavy rain at times': 'üåßÔ∏è', 'light rain shower': 'üå¶Ô∏è',
        'moderate or heavy rain shower': 'üåßÔ∏è', 'light snow showers': '‚ùÑÔ∏è',
        'moderate or heavy snow showers': '‚ùÑÔ∏è', 'patchy light snow': '‚ùÑÔ∏è',
    }
    
    TRANSLATIONS = {
        'Sunny': '—Å–æ–ª–Ω–µ—á–Ω–æ', 'Clear': '—è—Å–Ω–æ',
        'Partly cloudy': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', 
        'Cloudy': '–æ–±–ª–∞—á–Ω–æ', 'Overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'Patchy rain possible': '–≤–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å',
        'Light rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 
        'Moderate rain': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
        'Heavy rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'Light snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'Heavy snow': '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥',
        'Thundery outbreaks possible': '–≤–æ–∑–º–æ–∂–Ω–∞ –≥—Ä–æ–∑–∞',
        'Mist': '–¥—ã–º–∫–∞', 'Fog': '—Ç—É–º–∞–Ω',
        'Patchy light rain': '–º–µ—Å—Ç–∞–º–∏ –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'Moderate rain at times': '–≤—Ä–µ–º–µ–Ω–∞–º–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
        'Heavy rain at times': '–≤—Ä–µ–º–µ–Ω–∞–º–∏ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'Light rain shower': '–Ω–µ–±–æ–ª—å—à–æ–π –ª–∏–≤–µ–Ω—å',
        'Moderate or heavy rain shower': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å',
        'Light snow showers': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥–æ–ø–∞–¥',
        'Moderate or heavy snow showers': '—É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
        'Patchy light snow': '–º–µ—Å—Ç–∞–º–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
    }
    
    @staticmethod
    def get_condition_emoji(condition, is_day=True):
        condition_lower = condition.lower()
        
        for weather_key, emoji in WeatherIcons.WEATHER_MAPPING.items():
            if weather_key in condition_lower:
                if weather_key in ['clear', 'sunny'] and not is_day:
                    return 'üåô'
                return emoji
        return 'üå§Ô∏è'
    
    @staticmethod
    def get_condition_russian(condition):
        return WeatherIcons.TRANSLATIONS.get(condition, condition)
    
    @staticmethod
    def get_wind_strength(speed_kmh):
        if speed_kmh < 5: return "—à—Ç–∏–ª—å"
        elif speed_kmh < 15: return "–ª–µ–≥–∫–∏–π"
        elif speed_kmh < 30: return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
        elif speed_kmh < 50: return "—Å–∏–ª—å–Ω—ã–π"
        else: return "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    
    @staticmethod
    def get_wind_direction(degree):
        directions = ['‚¨áÔ∏è –°', '‚ÜôÔ∏è –°–í', '‚¨ÖÔ∏è –í', '‚ÜñÔ∏è –Æ–í', '‚¨ÜÔ∏è –Æ', '‚ÜóÔ∏è –Æ–ó', '‚û°Ô∏è –ó', '‚ÜòÔ∏è –°–ó']
        index = round(degree / 45) % 8
        return directions[index]
    
    @staticmethod
    def get_uv_level(uv_index):
        if uv_index <= 2: return "üü¢ –Ω–∏–∑–∫–∏–π", "–æ—Ç–ª–∏—á–Ω–æ"
        elif uv_index <= 5: return "üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π", "—Ö–æ—Ä–æ—à–æ"
        elif uv_index <= 7: return "üü† –≤—ã—Å–æ–∫–∏–π", "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"
        elif uv_index <= 10: return "üî¥ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π", "–æ–ø–∞—Å–Ω–æ"
        else: return "üíÄ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π", "–æ—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ"
    
    @staticmethod
    def get_precipitation_level(precip_mm):
        if precip_mm == 0: return "–Ω–µ—Ç"
        elif precip_mm < 2.5: return "—Å–ª–∞–±—ã–µ"
        elif precip_mm < 7.5: return "—É–º–µ—Ä–µ–Ω–Ω—ã–µ"
        elif precip_mm < 15: return "—Å–∏–ª—å–Ω—ã–µ"
        else: return "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ"

class WeatherService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ API"""
    
    @staticmethod
    def get_city_coordinates(city_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞"""
        try:
            url = "http://api.weatherapi.com/v1/search.json"
            params = {'key': WEATHERAPI_KEY, 'q': city_name, 'lang': 'ru'}
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data:
                    city_name_lower = city_name.lower()
                    for city in data:
                        if city['name'].lower() == city_name_lower:
                            return city['name'], city['lat'], city['lon']
                    return data[0]['name'], data[0]['lat'], data[0]['lon']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return None
    
    @staticmethod
    def get_weather_data(lat, lon):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ (1 –¥–µ–Ω—å)"""
        try:
            url = "http://api.weatherapi.com/v1/forecast.json"
            params = {
                'key': WEATHERAPI_KEY,
                'q': f"{lat},{lon}",
                'days': 1,
                'lang': 'ru',
                'aqi': 'yes'
            }
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data if 'error' not in data else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

    @staticmethod
    def get_weather_data_2days(lat, lon):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ 2 –¥–Ω—è"""
        try:
            url = "http://api.weatherapi.com/v1/forecast.json"
            params = {
                'key': WEATHERAPI_KEY,
                'q': f"{lat},{lon}",
                'days': 2,
                'lang': 'ru',
                'aqi': 'yes'
            }
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data if 'error' not in data else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

class SevenDayForecastService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ Open-Meteo"""
    
    @staticmethod
    def get_7day_forecast(lat, lon):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 7 –¥–Ω–µ–π"""
        try:
            url = "https://api.open-meteo.com/v1/forecast"
            params = {
                'latitude': lat,
                'longitude': lon,
                'daily': [
                    'weathercode', 'temperature_2m_max', 'temperature_2m_min',
                    'precipitation_probability_max', 'windspeed_10m_max',
                    'winddirection_10m_dominant', 'uv_index_clear_sky_max',
                    'sunrise', 'sunset'
                ],
                'timezone': 'auto',
                'forecast_days': 8
            }
            
            response = requests.get(url, params=params, timeout=10)
            return response.json() if response.status_code == 200 else None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None

class WeatherFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    
    @staticmethod
    def get_time_of_day(hour):
        if 5 <= hour < 12: return "–£—Ç—Ä–æ"
        elif 12 <= hour < 17: return "–î–µ–Ω—å"
        elif 17 <= hour < 22: return "–í–µ—á–µ—Ä"
        else: return "–ù–æ—á—å"
    
    @staticmethod
    def get_current_hour_forecast(weather_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞"""
        location = weather_data['location']
        forecast = weather_data['forecast']['forecastday'][0]
        local_time = datetime.strptime(location['localtime'], '%Y-%m-%d %H:%M')
        
        for hour_data in forecast['hour']:
            hour_time = datetime.strptime(hour_data['time'], '%Y-%m-%d %H:%M')
            if hour_time.hour == local_time.hour:
                return hour_data
        return None
    
    @staticmethod
    def format_current_weather(weather_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞"""
        if not weather_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"
        
        location = weather_data['location']
        current = weather_data['current']
        local_time = datetime.strptime(location['localtime'], '%Y-%m-%d %H:%M')
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ê–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–ê –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ß–ê–°–ê
        current_hour_forecast = WeatherFormatter.get_current_hour_forecast(weather_data)
        
        if current_hour_forecast:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            condition = current_hour_forecast['condition']['text']
            is_day = current_hour_forecast['is_day'] == 1
            temp = current_hour_forecast['temp_c']
            feels_like = current_hour_forecast['feelslike_c']
            wind_speed = current_hour_forecast['wind_kph']
            wind_dir = current_hour_forecast['wind_degree']
            precip_mm = current_hour_forecast.get('precip_mm', 0)
            chance_of_rain = current_hour_forecast.get('chance_of_rain', 0)
            humidity = current_hour_forecast['humidity']
            pressure_mb = current_hour_forecast['pressure_mb']
            vis_km = current_hour_forecast['vis_km']
            uv = current_hour_forecast.get('uv', 0)
        else:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            condition = current['condition']['text']
            is_day = current['is_day'] == 1
            temp = current['temp_c']
            feels_like = current['feelslike_c']
            wind_speed = current['wind_kph']
            wind_dir = current['wind_degree']
            precip_mm = current.get('precip_mm', 0)
            chance_of_rain = 0
            humidity = current['humidity']
            pressure_mb = current['pressure_mb']
            vis_km = current.get('vis_km', 10)
            uv = current.get('uv', 0)
        
        city = location['name']
        condition_russian = WeatherIcons.get_condition_russian(condition)
        emoji = WeatherIcons.get_condition_emoji(condition, is_day)
        
        lines = [
            f"{emoji} **–í {city} {condition_russian}**",
            f"üïê *{local_time.strftime('%H:%M')} ‚Ä¢ {WeatherFormatter.get_time_of_day(local_time.hour)}*",
            "",
            "**üå°Ô∏è –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò**",
            ""
        ]
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp_diff = feels_like - temp
        diff_symbol = "‚Üë" if temp_diff > 0.5 else "‚Üì" if temp_diff < -0.5 else "‚Ä¢"
        diff_text = f" ({diff_symbol}{abs(temp_diff):.0f}¬∞)" if abs(temp_diff) > 0.5 else ""
        lines.extend([
            f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** `{temp:.0f}¬∞C`{diff_text}",
            f"**–û—â—É—â–∞–µ—Ç—Å—è:** `{feels_like:.0f}¬∞C`"
        ])
        
        # –í–ª–∞–∂–Ω–æ—Å—Ç—å
        lines.append(f"**–í–ª–∞–∂–Ω–æ—Å—Ç—å:** `{humidity}%`")
        
        # –û—Å–∞–¥–∫–∏
        precip_level = WeatherIcons.get_precipitation_level(precip_mm)
        if chance_of_rain > 0:
            precip_text = f"üåßÔ∏è `{precip_level}` ({precip_mm}mm, {chance_of_rain}% chance)"
        else:
            precip_text = f"üåßÔ∏è `{precip_level}` ({precip_mm}mm)" if precip_mm > 0 else "‚òÄÔ∏è `–Ω–µ—Ç –æ—Å–∞–¥–∫–æ–≤`"
        lines.append(f"**–û—Å–∞–¥–∫–∏:** {precip_text}")
        
        # –í–µ—Ç–µ—Ä
        wind_strength = WeatherIcons.get_wind_strength(wind_speed)
        wind_direction = WeatherIcons.get_wind_direction(wind_dir)
        wind_gust = current.get('gust_kph', 0)
        wind_text = f"{wind_strength} (`{wind_speed} –∫–º/—á` {wind_direction})"
        if wind_gust > wind_speed + 10:
            wind_text += f" üí® –ø–æ—Ä—ã–≤—ã –¥–æ `{wind_gust} –∫–º/—á`"
        lines.append(f"**–í–µ—Ç–µ—Ä:** {wind_text}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        uv_level, uv_status = WeatherIcons.get_uv_level(uv)
        lines.extend([
            f"**–£–§-–∏–Ω–¥–µ–∫—Å:** {uv_level} `{uv:.1f}` ({uv_status})",
            f"**–î–∞–≤–ª–µ–Ω–∏–µ:** `{pressure_mb:.1f} –≥–ü–∞`",
            f"**–í–∏–¥–∏–º–æ—Å—Ç—å:** `{vis_km} –∫–º`"
        ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        lines.extend(["", "**üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**", ""])
        recommendations = WeatherFormatter._get_recommendations(
            temp, feels_like, humidity, wind_speed, uv, precip_mm, vis_km
        )
        lines.extend(recommendations)
        
        return "\n".join(lines)
    
    @staticmethod
    def format_6hour_forecast(weather_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 6 —á–∞—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"""
        if not weather_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"
        
        location = weather_data['location']
        current = weather_data['current']
        forecast_days = weather_data['forecast']['forecastday']
        local_time = datetime.strptime(location['localtime'], '%Y-%m-%d %H:%M')
        
        lines = [
            f"üïí **–¢–û–ß–ù–´–ô –ü–†–û–ì–ù–û–ó –ù–ê 6 –ß–ê–°–û–í - {location['name']}**",
            f"*–ù–∞—á–∞–ª–æ: {local_time.strftime('%H:%M')} ‚Ä¢ {WeatherFormatter.get_time_of_day(local_time.hour)}*",
            "",
            "‚è∞ **–ü–û–ß–ê–°–û–í–û–ô –ü–†–û–ì–ù–û–ó**",
            "",
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê",
            "‚îÇ  –í—Ä–µ–º—è   ‚îÇ –ü–æ–≥–æ–¥–∞ ‚îÇ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚îÇ –û—Å–∞–¥–∫–∏ ‚îÇ –í–µ—Ç–µ—Ä  ‚îÇ",
            "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        current_day_hours = forecast_days[0]['hour'][local_time.hour:]
        hours_forecast = current_day_hours
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —á–∞—Å–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        if len(hours_forecast) < 6 and len(forecast_days) > 1:
            next_day_hours = forecast_days[1]['hour'][:6 - len(hours_forecast)]
            hours_forecast.extend(next_day_hours)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 —á–∞—Å–∞–º–∏
        hours_forecast = hours_forecast[:6]
        
        for i, hour_data in enumerate(hours_forecast):
            hour_time = datetime.strptime(hour_data['time'], '%Y-%m-%d %H:%M')
            
            # –î–õ–Ø –ü–ï–†–í–û–ì–û –ß–ê–°–ê ("–°–µ–π—á–∞—Å") –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ê–ù–ù–´–ï –ü–†–û–ì–ù–û–ó–ê –î–õ–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò
            if i == 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤ /weather)
                current_hour_forecast = WeatherFormatter.get_current_hour_forecast(weather_data)
                if current_hour_forecast:
                    condition = current_hour_forecast['condition']['text']
                    is_day = current_hour_forecast['is_day'] == 1
                    temp = current_hour_forecast['temp_c']
                    feels_like = current_hour_forecast['feelslike_c']
                    wind_speed = current_hour_forecast['wind_kph']
                    wind_dir = current_hour_forecast['wind_degree']
                    chance_of_rain = current_hour_forecast.get('chance_of_rain', 0)
                else:
                    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    condition = hour_data['condition']['text']
                    is_day = hour_data['is_day'] == 1
                    temp = hour_data['temp_c']
                    feels_like = hour_data['feelslike_c']
                    wind_speed = hour_data['wind_kph']
                    wind_dir = hour_data['wind_degree']
                    chance_of_rain = hour_data.get('chance_of_rain', 0)
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                condition = hour_data['condition']['text']
                is_day = hour_data['is_day'] == 1
                temp = hour_data['temp_c']
                feels_like = hour_data['feelslike_c']
                wind_speed = hour_data['wind_kph']
                wind_dir = hour_data['wind_degree']
                chance_of_rain = hour_data.get('chance_of_rain', 0)
            
            emoji = WeatherIcons.get_condition_emoji(condition, is_day)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if i == 0:
                time_str = "–°–µ–π—á–∞—Å"
            else:
                # –î–ª—è —á–∞—Å–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                if hour_time.date() > local_time.date():
                    time_str = hour_time.strftime('%H:%M') + "üåô"
                else:
                    time_str = hour_time.strftime('%H:%M')
            
            temp_text = f"{temp:.0f}¬∞({feels_like:.0f}¬∞)"
            precip_text = f"{chance_of_rain}%" if chance_of_rain > 0 else " - "
            wind_direction = WeatherIcons.get_wind_direction(wind_dir)
            wind_display = f"{wind_speed:.0f}{wind_direction}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
            line = f"‚îÇ {time_str:^8} ‚îÇ {emoji:^6} ‚îÇ {temp_text:^11} ‚îÇ {precip_text:^6} ‚îÇ {wind_display:^6} ‚îÇ"
            lines.append(line)
        
        lines.extend([
            "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò",
            "",
            "**üìã –û–ë–û–ó–ù–ê–ß–ï–ù–ò–Ø:**",
            "‚Ä¢ **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞** - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è ¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ¬∞C)",
            "‚Ä¢ **–û—Å–∞–¥–∫–∏** - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è –≤ %", 
            "‚Ä¢ **–í–µ—Ç–µ—Ä** - —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á) + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            "‚Ä¢ **üåô** - —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"
        ])
        
        return "\n".join(lines)
    
    @staticmethod
    def _get_recommendations(temp, feels_like, humidity, wind_speed, uv_index, precip_mm, visibility):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –û–¥–µ–∂–¥–∞
        if feels_like > 25:
            recommendations.append("‚Ä¢ üëï –û—á–µ–Ω—å –ª–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        elif feels_like > 20:
            recommendations.append("‚Ä¢ üëï –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞, –≤–æ–∑–º–æ–∂–µ–Ω –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä")
        elif feels_like > 15:
            recommendations.append("‚Ä¢ üëî –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –∫–æ—Ñ—Ç–∞")
        elif feels_like > 10:
            recommendations.append("‚Ä¢ üß• –î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞")
        elif feels_like > 5:
            recommendations.append("‚Ä¢ üß• –¢–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞")
        elif feels_like > 0:
            recommendations.append("‚Ä¢ üß£ –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞, —à–∞—Ä—Ñ")
        else:
            recommendations.append("‚Ä¢ üß£ –¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –æ–¥–µ–∂–¥–∞, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏, —à–∞—Ä—Ñ")
        
        # –ó–æ–Ω—Ç
        if precip_mm > 10:
            recommendations.append("‚Ä¢ üåÇ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏ –¥–æ–∂–¥–µ–≤–∏–∫")
        elif precip_mm > 5:
            recommendations.append("‚Ä¢ üåÇ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–æ–Ω—Ç")
        elif precip_mm > 0:
            recommendations.append("‚Ä¢ üåÇ –í–æ–∑–º–æ–∂–Ω—ã –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏")
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ–ª–Ω—Ü–∞
        if uv_index > 7:
            recommendations.append("‚Ä¢ üòé –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–µ–º SPF 50+")
        elif uv_index > 5:
            recommendations.append("‚Ä¢ üòé –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫—Ä–µ–º SPF 30+")
        
        # –í–µ—Ç–µ—Ä
        if wind_speed > 40:
            recommendations.append("‚Ä¢ üí® –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã")
        elif wind_speed > 30:
            recommendations.append("‚Ä¢ üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –æ–¥–µ–∂–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–≤–µ–≤–∞—Ç—å—Å—è")
        
        return recommendations

class SevenDayForecastFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    WEATHER_EMOJIS = {
        0: '‚òÄÔ∏è', 1: 'üå§Ô∏è', 2: '‚õÖ', 3: '‚òÅÔ∏è', 45: 'üå´Ô∏è', 48: 'üå´Ô∏è',
        51: 'üå¶Ô∏è', 53: 'üå¶Ô∏è', 55: 'üå¶Ô∏è', 61: 'üåßÔ∏è', 63: 'üåßÔ∏è', 65: 'üåßÔ∏è',
        80: 'üå¶Ô∏è', 81: 'üåßÔ∏è', 82: '‚õàÔ∏è', 95: '‚õàÔ∏è', 96: '‚õàÔ∏è‚ûï', 99: '‚õàÔ∏è‚ûï'
    }
    
    WEEKDAY_NAMES = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
    
    @staticmethod
    def format_7day_forecast(forecast_data, city_name):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 7-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not forecast_data or 'daily' not in forecast_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"
        
        daily = forecast_data['daily']
        times = daily['time'][1:8]  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è
        
        lines = [
            f"üìÖ **–ü–†–û–ì–ù–û–ó –ù–ê 7 –î–ù–ï–ô - {city_name.upper()}**",
            "",
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"